{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WCL3yCeATBxl"
      },
      "source": [
        "# Feedback from previous weeks and other and hints\n",
        "\n",
        "1. Be careful about your environment remembering variables. Make sure your code works in a new _clean_ environment. In Colab: `Runtime`->`restart Runtime`, in Anaconda's Jupyter: `Kernel`->`Restart`.\n",
        "2. Graphs without labels (or units when appropriate) are not worth any point.\n",
        "3. Do put in sufficient explanatory comments in your code.\n",
        "4. Functions are very important. Do look up the video on the Safari O'Reilly ressource if you are still not clear on them !\n",
        "\n",
        "For this week you can use these imports at the start of your programs:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FaLpZqr6TBxn"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vY6vgfsbTBxo"
      },
      "source": [
        "We will use a new module `uncertainties`, which is **not** standard in the colab environment. You will have to first run:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "b637FSONTBxo"
      },
      "outputs": [],
      "source": [
        "! pip install -q uncertainties"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vZ8JtIeTTBxo"
      },
      "source": [
        "To install the module before you can import it:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fN-jNxQXTBxo"
      },
      "outputs": [],
      "source": [
        "import uncertainties as uc\n",
        "import uncertainties.umath as um # for maths functions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bSypkWtsTBxp"
      },
      "source": [
        "# Introduction\n",
        "In the practical classes PX2133/PX2233 and PX2338 (Obs tech), as well as your year 3/4 project, a lot of emphasis is placed on the determination and mathematical handling of errors.\n",
        "The uncertainties module allows us to deal very easily with [error propagation](https://en.wikipedia.org/wiki/Propagation_of_uncertainty). For this sheet you should remind yourself about error bars in measurements and about propagation of uncertainties. Take an example from your lab handbook:\n",
        "\n",
        "**Example 1**: If the length of a rectangle is $1.24\\pm0.02 m$ and its breadth is $0.61\\pm0.01 m$, what is its area and the error in the area? The following code snippet solves this problem in a few lines."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "101RoDHmTBxp",
        "outputId": "b879bb2e-1118-425a-e89b-8e2cc20f5e1c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area is: 0.756+/-0.017 m^2\n"
          ]
        }
      ],
      "source": [
        "L = uc.ufloat(1.24, 0.02)\n",
        "W = uc.ufloat(0.61, 0.01)\n",
        "print ('Area is:', L*W, 'm^2') # Do remember to add the units when printing!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jx1kxdd4TBxp"
      },
      "source": [
        "**Note**: For the area itself, it's fairly straightforward:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bYgxFeGeTBxq",
        "outputId": "ab4d406f-cb42-467c-ead8-aca05b1259ec"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7564"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "1.24*0.61"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Nul4epgTBxq"
      },
      "source": [
        "However, for the error bar on this number:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PrCjPHzmTBxq",
        "outputId": "cb97f3e7-6116-4922-e99c-6ef6615b128c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0002"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "0.02*0.01"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hx4vxoYsTBxq"
      },
      "source": [
        "does not work. Instead, the [error progation formula](https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulae) gives:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KXiGP83CTBxq",
        "outputId": "58e5a344-600e-4dec-91b2-ef11a1a8d3c0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(0.01739540169125163)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "np.abs(1.24*0.61)*np.sqrt((0.02/1.24)**2+(0.01/0.61)**2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TwauKWMyTBxq"
      },
      "source": [
        "So the area is $0.756\\pm0.017 m^2$. `uncertainties` obviously saves a lot of work, even for such a simple case. You can also take a look at the web site uncertainties hosted at https://pythonhosted.org/uncertainties/user_guide.html. In particular, [this section](https://pythonhosted.org/uncertainties/user_guide.html#access-to-the-uncertainty-and-to-the-nominal-value) shows some of the properties of a `ufloat` you can access directly.\n",
        "\n",
        "**Example 2**: A reference object is $10.0\\pm0.0001 m$ long, and makes a viewing angle of $0.62\\pm0.02 rad$. How far is it?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eFRcFkIHTBxq",
        "outputId": "f7611d6a-7cd5-48df-cc96-c52d68d997be"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Distance is: 15.609024890896208 m, with an error of: 0.537283338762715\n"
          ]
        }
      ],
      "source": [
        "L = uc.ufloat(10.0, 0.0001)\n",
        "theta = uc.ufloat(0.62,0.02)\n",
        "\n",
        "Distance = (L/2)/um.tan(theta/2)\n",
        "\n",
        "print ('Distance is:', Distance.nominal_value, 'm, with an error of:', Distance.std_dev)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fkuPC-D3TBxr"
      },
      "source": [
        "Note the need to use \"umath\" functions (like `um.tan()` instead of `np.tan()`), and how to get the nominal value and the standard deviation of the uncertainties objects. To get nicer looking output, such as controlling the number of significant digits printed, you can use the information about formatting at https://docs.python.org/3/tutorial/inputoutput.html. In the exercises below you need to print the values to the screen. (Don’t forget units.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KpBpXym7TBxr"
      },
      "source": [
        "# Exercises\n",
        "This must be marked before you leave the lab. Mark weighting is in brackets.\n",
        "**Save your work to GitHub after having run all cells with `Runtime` -> `Restart and run all`. And do not change the notebook's filename.** Do add comments to your code, you'll lose points if your code is hard to understand. Graphs without labels (or units when appropriate) are not worth any point.\n",
        "\n",
        "## Exercise 0\n",
        "[0] With some approximations, we have measured the mass of the following black-holes:\n",
        "```\n",
        "\"35.6+/-3.9\",\"30.6+/-3.7\",\"63.1+/-3.2\",\"23.2+/-9.8\",\"13.6+/-4.5\",\"35.7+/-6.8\",\"13.7+/-6.0\",\"7.7+/-2.4\",\"20.5+/-4.0\"\n",
        "```\n",
        "Compute for each (with error-bars) their lifetime due to Hawking radiation:\n",
        "$$\n",
        "t = \\left(\\frac{M}{M_{\\odot}}\\right)^3\\,\\times\\,2.097\\,\\times\\,10^{67} yr\n",
        "$$\n",
        "\n",
        "(this exercise is for demonstration purposes and won't be marked)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6rsSZWg-TBxr",
        "outputId": "99115c57-aa82-4f16-cd7a-4da2c66e8aae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the lifetime of these black holes in years is respectively (9.5+/-3.1)e+71 (6.0+/-2.2)e+71 (5.3+/-0.8)e+72 (2.6+/-3.3)e+71 (5+/-5)e+70 (1.0+/-0.5)e+72 (5+/-7)e+70 (1.0+/-0.9)e+70 (1.8+/-1.1)e+71\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# data\n",
        "M1 = uc.ufloat(35.6, 3.9)\n",
        "M2 = uc.ufloat(30.6, 3.7)\n",
        "M3 = uc.ufloat(63.1, 3.2)\n",
        "M4 = uc.ufloat(23.2, 9.8)\n",
        "M5 = uc.ufloat(13.6, 4.5)\n",
        "M6 = uc.ufloat(35.7, 6.8)\n",
        "M7 = uc.ufloat(13.7, 6.0)\n",
        "M8 = uc.ufloat(7.7, 2.4)\n",
        "M9 = uc.ufloat(20.5, 4.0)\n",
        "\n",
        "# defining a function\n",
        "def t(M):\n",
        "\n",
        "  \"\"\"\n",
        "  gives the lifetime of a black hole in years\n",
        "  \"\"\"\n",
        "  return M**3 * 2.097e+67\n",
        "\n",
        "print (\"the lifetime of these black holes in years is respectively\", t(M1), t(M2), t(M3), t(M4), t(M5), t(M6), t(M7), t(M8), t(M9))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5dAHtPNpTBxr"
      },
      "source": [
        "## Exercise 1\n",
        "[2] An object is measured to travel a distance $x = 5.1 \\pm 0.4 m$ during a time of $t = 0.4 \\pm 0.1 s$. What is the average velocity and the error in the average velocity?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h2h5TTFKTBxr",
        "outputId": "1e73768a-4f23-4d06-c921-b23891bfa7e4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average velocity is: 12.749999999999998 m/s, with an error of: 3.3406820037231912\n"
          ]
        }
      ],
      "source": [
        "x = uc.ufloat(5.1, 0.4)\n",
        "t = uc.ufloat(0.4, 0.1)\n",
        "velocity = x/t\n",
        "print ('Average velocity is:', velocty.nominal_value, 'm/s, with an error of:', velocity.std_dev)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TlIe9iWRTBxr"
      },
      "source": [
        "## Exercise 2\n",
        "[2] An enterprising cow attempts to jump over the moon by jumping vertically into the air with initial speed $v_0=4.0\\pm0.2 m/s$. After a time $t=0.60\\pm0.06s$, the height of the cow is $h = v_0t-\\frac{1}{2}g t^2 = 0.636 m$. What is the uncertainty in $h$? Take $g$ as exactly $9.81 ms^{-2}$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nc3ikeuhTBxr",
        "outputId": "a47688b9-0105-46bf-b5d4-993865a8a063"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Height is: 0.6341999999999999 m, with an error of: 0.1649399454346945\n"
          ]
        }
      ],
      "source": [
        "v0 = uc.ufloat(4.0, 0.2)\n",
        "t = uc.ufloat(0.60, 0.06)\n",
        "g = 9.81\n",
        "h = v0*t - 0.5*g*t**2\n",
        "print ('Height is:', h.nominal_value, 'm, with an error of:', h.std_dev)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fIxT_lXdTBxr"
      },
      "source": [
        "## Exercise 3\n",
        "[2] In an optics experiment the object distance $u$ is measured to be 20cm and the image distance $v$ is 10cm, both to an accuracy of 0.5cm. Find the focal length $f$ of the lens using the formula:\n",
        "\n",
        "$$ \\frac{1}{u}+\\frac{1}{v}=\\frac{1}{f}$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RFO86U0hTBxr",
        "outputId": "3297f39a-0e58-49fd-8fc9-d298dcb24675"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Focal length is: 0.03333333333333333 cm, with an error of: 0.0007856742013183861\n"
          ]
        }
      ],
      "source": [
        "u = uc.ufloat(20, 0.5)\n",
        "v = uc.ufloat(10, 0.5)\n",
        "f = 1/(u+v)\n",
        "print ('Focal length is:', f.nominal_value, 'cm, with an error of:', f.std_dev)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hUjy6iy2TBxr"
      },
      "source": [
        "## Exercise 4\n",
        "[2] Two students each measure the refractive index of water. Jack measures a value of $1.33 \\pm 0.03$ while Jill measures $1.28 \\pm 0.02$. Are these values in agreement? *You do have to think a bit about this one...*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_iy4EsWfTBxr",
        "outputId": "79416328-d3dd-433e-8df6-2743317ec800"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The difference between Jack and Jill is: 0.050000000000000044 with an error of: 0.03605551275463989 so the values are in agreement\n"
          ]
        }
      ],
      "source": [
        "v1 = uc.ufloat(1.33, 0.03)\n",
        "v2 = uc.ufloat(1.28, 0.02)\n",
        "v = v1 - v2\n",
        "print ('The difference between Jack and Jill is:', v.nominal_value, 'with an error of:', v.std_dev, \"so the values are in agreement\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ohjEFY2RTBxs"
      },
      "source": [
        "## Exercise 5\n",
        "[2] The damped resonance frequency $\\omega_{res}$ of an oscillating system is related to the (un-damped) natural angular frequency $\\omega_0$ and the damping coefficient $\\alpha$ by:\n",
        "\n",
        "$$\\omega_{res} = \\sqrt{ \\omega_0^2 - 2\\alpha^2}$$\n",
        "\n",
        "Find $f_0$ if the measured resonance frequency $f_{res}$ is $23.2\\pm0.1 Hz$ and the measured damping coefficient is $19.5\\pm0.5s^{-1}$.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rz66kXcGTBxs",
        "outputId": "6e61541b-f5d7-412b-a05f-470d52e632fa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "f0 = 36.0+/-0.5\n"
          ]
        }
      ],
      "source": [
        "f_res = uc.ufloat(23.2, 0.1)\n",
        "alpha = uc.ufloat(19.5, 0.5)\n",
        "f_0 = um.sqrt(f_res**2 + 2*alpha**2)\n",
        "print(\"f0 =\", f_0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T912v8zyTBxs"
      },
      "source": [
        "## Exercise 6\n",
        "[2] Suppose you have the following equation from one of your lab experiments:\n",
        "\n",
        "$$f=\\frac{c}{2}\\sqrt{\\frac{n_x^2}{L_x^2}+\\frac{n_y^2}{L_y^2}+\\frac{n_z^2}{L_z^2}}$$\n",
        "\n",
        "where $f$ is the resonant frequency of sound waves in a box of sides $L_x$, $L_y$ and $L_z$ in length and the $n_x$ etc. are integers. $L_x = 10.2\\pm0.2m$, $L_y = 5.2\\pm0.3m$ and $L_z = 20.0\\pm0.1 m$, while $c = 331.3 + T * 0.606 \\,m\\,s^{-1}$ is the temperature-dependent speed of sound, and the temperature $T$ is $23 \\pm 1^\\circ C$.\n",
        "Calculate $f$ and the error in $f$ for the following values of $(nx,ny,nz)= (1,1,1), (1,1,2)$ and $(2,1,1)$.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oAVGCbgqTBxs",
        "outputId": "4da5e561-74d2-4813-ed97-c1d589db4967"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "f(1,1,1) = 2.91+/-0.13\n",
            "f(1,1,2) = 3.13+/-0.12\n",
            "f(2,1,1) = 3.67+/-0.11\n"
          ]
        }
      ],
      "source": [
        "# data\n",
        "Lx = uc.ufloat(10.2, 0.2)\n",
        "Ly = uc.ufloat(5.2, 0.3)\n",
        "Lz = uc.ufloat(20.0, 0.1)\n",
        "T = uc.ufloat(23, 1)\n",
        "c = 331.3 + T*0.606\n",
        "\n",
        "# define function\n",
        "def f(nx, ny, nz):\n",
        "  return um.sqrt(c/2*(nx**2/Lx**2 + ny**2/Ly**2 + nz**2/Lz**2))\n",
        "\n",
        "print ('f(1,1,1) =', f(1,1,1))\n",
        "print ('f(1,1,2) =', f(1,1,2))\n",
        "print ('f(2,1,1) =', f(2,1,1))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2GOIMtutTBxs"
      },
      "source": [
        "## Exercise 7\n",
        "[4] The reflection coefficient $R_\\parallel$ for parallel plane-polarised light reflected from a surface is given by the equation:\n",
        "\n",
        "$$ R_\\parallel = \\frac{\\tan^2(\\theta_i - \\theta_t)}{\\tan^2(\\theta_i + \\theta_t)} $$\n",
        "\n",
        "Calculate the error in $R_\\parallel$ given measurements $\\theta_i = (78 \\pm 1)^\\circ$ and $\\theta_t = (40 \\pm 1)^\\circ$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0VoRlvLTTBxs",
        "outputId": "0a368199-bc1a-4976-aa4d-aea8a8c1ec4f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reflection coefficient is: 0.003572137026589645 with an error of: 0.06506774439998199\n"
          ]
        }
      ],
      "source": [
        "θi = uc.ufloat(78, 1)\n",
        "θt = uc.ufloat(40, 1)\n",
        "R = (um.tan(θi - θt)**2)/(um.tan(θi + θt)**2)\n",
        "print ('Reflection coefficient is:', R.nominal_value, 'with an error of:', R.std_dev)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2HueRsKGTBxs"
      },
      "source": [
        "## Exercise 8\n",
        "[4] Calculate and print to the screen the fractional uncertainty, as a percentage to one\n",
        "significant figure, of the fluid flow discharge coefficient $C_d$ from the equation\n",
        "\n",
        "$$\n",
        "C_d = \\frac{\\dot{m}\\sqrt{1-\\left(\\frac{d}{D}\\right)^4}}{Kd^2F\\sqrt{\\rho\\Delta P}}\n",
        "$$\n",
        "\n",
        "where\n",
        "\n",
        "\\begin{align*}\n",
        "    C_d &= \\text{discharge coefficient}&& \\text{(no units)} \\\\\n",
        "    \\dot{m} &= \\text{mass flow rate}&& = 0.13 \\pm 0.01kg\\,s^{-1} \\\\\n",
        "    d &= \\text{orifice diameter}&& = 11\\pm 1 mm \\\\\n",
        "    D &= \\text{pipe diameter}&& = 71 \\pm 1 mm \\\\\n",
        "    \\rho &= \\text{fluid density}&& =1.01\\pm0.01g\\,cm^{-3} \\\\\n",
        "    \\Delta P &= \\text{differential pressure}&& =156 \\pm 7 Pa \\\\\n",
        "    K &= \\text{a constant parameter}&& =\\text{constant (no units)} \\\\\n",
        "    F &= \\text{thermal expansion factor}&& =\\text{constant (no units)}\n",
        "\\end{align*}\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J4yIZzU5TBxs"
      },
      "outputs": [],
      "source": [
        "m = uc.ufloat(0.13, 0.01)\n",
        "d = uc.ufloat(11, 1)\n",
        "D = uc.ufloat(71, 1)\n",
        "ρ = uc.ufloat(1.01, 0.01)\n",
        "ΔP = uc.ufloat(156, 7)\n",
        "K = 1\n",
        "F = 1\n",
        "Cd = m*um.sqrt(1 - (d/D)**4)/(K*D**2*F*um.sqrt(ρ*ΔP))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uzgV7wBRTBxs"
      },
      "source": [
        "## Exercise 9: Optional problem (not marked)\n",
        "If you have time and want to try something interesting, do the following problem by plotting in 2D:\n",
        " - Draw an equilateral triangle with vertices and coordinates: vertex 1: $(p_1,q_1)$; vertex 2: $(p_2, q_2)$; vertex 3: $(p_3, q_3)$.\n",
        " - Place a dot at an arbitrary point $P = (x_0, y_0)$ within this triangle.\n",
        " - Find the next point by selecting randomly an integer $n = 1 , 2, $  or $3$ :\n",
        "    1. If 1 , place a dot halfway between P and vertex 1.\n",
        "    2. If 2 , place a dot halfway between P and vertex 2.\n",
        "    3. If 3 , place a dot halfway between P and vertex 3.\n",
        " - Repeat the last two steps using the last dot as the new P.\n",
        "\n",
        "Mathematically, the coordinates of successive points are given by the formulae\n",
        "\n",
        "$$(x_{i+1},y_{i+1})=0.5[(x_i,y_i)+(p_n,q_n)]$$\n",
        "\n",
        "and\n",
        "\n",
        "$$n=int(1+3r_i),$$\n",
        "\n",
        "where $r_i$ is a random number between 0 and 1 and where the $int()$ function outputs the closest integer smaller than or equal to the argument.\n",
        "\n",
        "Try extending this to four vertices."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "07cVnHyCTBxs"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}